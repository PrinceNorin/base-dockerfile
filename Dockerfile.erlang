FROM erlang:24.3.3

ENV ERL_LIBS=/erl_libs

RUN apt upgrade && apt update
RUN mkdir -p /erl_libs && mkdir -p /erl_templ

WORKDIR $ERL_LIBS
RUN git clone https://github.com/rustyio/sync && \
  cd sync && rebar3 compile && mkdir -p ebin && \
  cp _build/default/lib/sync/ebin/* ebin/ && \
  cp _build/default/lib/fs/ebin/* ebin/

# Bootstrap project script
RUN echo '#!/bin/bash\n\
\n\
usage() {\n\
  echo "Usage: erlang-app APP_NAME APP_DIR"\n\
  exit 1\n\
}\n\
\n\
app_name=$1\n\
if [ "$app_name" = "" ]; then\n\
  usage 1\n\
fi\n\
\n\
app_dir=$2\n\
if [ "$app_dir" = "" ]; then\n\
  usage 1\n\
fi\n\
\n\
set -u\n\
\n\
app_dir() {\n\
  mkdir -p $app_dir\n\
}\n\
\n\
project_templ() {\n\
  cd $app_dir\n\
  curl -O https://erlang.mk/erlang.mk\n\
  make -f erlang.mk bootstrap bootstrap-rel\n\
\n\
  cp /erl_templ/* ./src/\n\
  for file in `find "$app_dir" -type f`; do\n\
    newname=`echo $file | sed "s/myapp/$app_name/"`\n\
    if [ "$file" != "$newname" ]; then\n\
      mv "$file" "$newname"\n\
    fi\n\
    sed -i "s/myapp/$app_name/g" "$newname"\n\
  done\n\
  mv src/Dockerfile .\n\
  mv src/gitignore ./.gitignore\n\
  mv src/dockerignore ./.dockerignore\n\
  echo "\nbuild_docker:\n\t@docker build -t $app_name ." >> "$app_dir/Makefile"\n\
  echo "\nstart: build_docker\n\t@docker run --rm -it -v \$(CURDIR):/app $app_name" >> "$app_dir/Makefile"\n\
  echo "\nconsole: app\n\tERL_LIBS=\$(ERL_LIBS):deps; erl -pa ebin -s \"$app_name\"" >> "$app_dir/Makefile"\n\
}\n\
\n\
app_dir\n\
project_templ\n\
\n\
echo "Created an empty erlang project in $app_dir"' > /usr/local/bin/erlang-app
RUN chmod +x /usr/local/bin/erlang-app

# Create project bootstraping files
WORKDIR /erl_templ
RUN echo '-module(myapp).\n\
-export([start/0, stop/0, reload/0]).\n\
\n\
start() ->\n\
    application:start(myapp),\n\
    sync:go(),\n\
    sync:onsync(fun reload/1).\n\
\n\
stop() ->\n\
    application:stop(myapp),\n\
    sync:stop().\n\
\n\
reload() ->\n\
    application:stop(myapp),\n\
    application:start(myapp).\n\
\n\
reload(_Modules) ->\n\
    reload().' > ./myapp.erl

RUN echo '{application, 'myapp', [\n\
  {description, "My App"},\n\
  {vsn, "0.1.0"},\n\
  {modules, ['myapp_app','myapp_sup']},\n\
  {registered, [myapp_sup]},\n\
  {applications, [kernel,stdlib]},\n\
  {mod, {myapp_app, []}},\n\
  {env, []}\n\
]}.' > ./myapp.app.src

RUN echo 'FROM norin/erlang:24.3.3\n\
\n\
WORKDIR /app\n\
ADD . .\n\
\n\
CMD ["make", "console"]' > Dockerfile

RUN echo '### Generated by gibo (https://github.com/simonwhitaker/gibo)\n\
### https://raw.github.com/github/gitignore//Erlang.gitignore\n\
\n\
.eunit\n\
*.o\n\
*.beam\n\
*.plt\n\
erl_crash.dump\n\
.concrete/DEV_MODE\n\
\n\
### rebar 2.x\n\
.rebar\n\
rel/example_project\n\
ebin/*.beam\n\
deps\n\
\n\
### rebar 3\n\
.rebar3\n\
_build/\n\
_checkouts/\n\
\n\
### erlang.mk\n\
_rel/\n\
.erlang.mk/' > gitignore

RUN echo '### Generated by gibo (https://github.com/simonwhitaker/gibo)\n\
### https://raw.github.com/github/gitignore//Erlang.gitignore\n\
\n\
.eunit\n\
*.o\n\
*.beam\n\
*.plt\n\
erl_crash.dump\n\
.concrete/DEV_MODE\n\
\n\
### rebar 2.x\n\
.rebar\n\
rel/example_project\n\
ebin/*.beam\n\
deps\n\
\n\
### rebar 3\n\
.rebar3\n\
_build/\n\
_checkouts/\n\
\n\
### erlang.mk\n\
_rel/\n\
.erlang.mk/\n\
.git/\n\
Dockerfile*\n\
docker-compose.yml' > dockerignore

CMD ["erl"]
